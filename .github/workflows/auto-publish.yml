name: Auto Publish on Version Change

on:
  push:
    branches: [main, master]
    paths:
      - 'pyproject.toml'
  workflow_dispatch:

jobs:
  check-version-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history to compare versions
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Get current version
      id: current_version
      run: |
        VERSION=$(python .github/scripts/get_version.py)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
    
    - name: Get previous version from last commit
      id: previous_version
      run: |
        # Get the version from the previous commit
        git checkout HEAD~1 -- pyproject.toml 2>/dev/null || echo "No previous pyproject.toml found"
        
        if [ -f pyproject.toml ]; then
          PREV_VERSION=$(python .github/scripts/get_version.py pyproject.toml)
        else
          PREV_VERSION="0.0.0"
        fi
        
        # Restore current pyproject.toml
        git checkout HEAD -- pyproject.toml
        
        echo "previous_version=$PREV_VERSION" >> $GITHUB_OUTPUT
        echo "Previous version: $PREV_VERSION"
    
    - name: Check if version changed
      id: version_check
      run: |
        CURRENT="${{ steps.current_version.outputs.version }}"
        PREVIOUS="${{ steps.previous_version.outputs.previous_version }}"
        
        echo "Comparing versions: $PREVIOUS -> $CURRENT"
        
        if [ "$CURRENT" != "$PREVIOUS" ]; then
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "✅ Version changed from $PREVIOUS to $CURRENT"
        else
          echo "version_changed=false" >> $GITHUB_OUTPUT
          echo "❌ Version not changed (still $CURRENT)"
        fi
    
    - name: Check if version exists on PyPI
      id: pypi_check
      if: steps.version_check.outputs.version_changed == 'true'
      run: |
        VERSION="${{ steps.current_version.outputs.version }}"
        
        # Check if version exists on PyPI
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://pypi.org/pypi/deepwiki-cli/$VERSION/json")
        
        if [ "$HTTP_CODE" = "200" ]; then
          echo "exists_on_pypi=true" >> $GITHUB_OUTPUT
          echo "⚠️ Version $VERSION already exists on PyPI"
        else
          echo "exists_on_pypi=false" >> $GITHUB_OUTPUT
          echo "✅ Version $VERSION does not exist on PyPI"
        fi
    
    - name: Install build dependencies
      if: steps.version_check.outputs.version_changed == 'true' && steps.pypi_check.outputs.exists_on_pypi == 'false'
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Install package dependencies
      if: steps.version_check.outputs.version_changed == 'true' && steps.pypi_check.outputs.exists_on_pypi == 'false'
      run: |
        pip install -r requirements.txt
    
    - name: Build package
      if: steps.version_check.outputs.version_changed == 'true' && steps.pypi_check.outputs.exists_on_pypi == 'false'
      run: |
        python -m build
        echo "📦 Package built successfully"
    
    - name: Check built package
      if: steps.version_check.outputs.version_changed == 'true' && steps.pypi_check.outputs.exists_on_pypi == 'false'
      run: |
        twine check dist/*
        ls -la dist/
        echo "✅ Package validation passed"
    
    - name: Test package installation
      if: steps.version_check.outputs.version_changed == 'true' && steps.pypi_check.outputs.exists_on_pypi == 'false'
      run: |
        pip install dist/*.whl
        python -c "from deepwiki_cli import query_repository; print('✅ Package import test passed')"
        python -c "from deepwiki_cli.rag.splitter.txt_splitter import TxtTextSplitter; print('✅ TxtTextSplitter import test passed')"
    
    - name: Publish to TestPyPI first
      if: steps.version_check.outputs.version_changed == 'true' && steps.pypi_check.outputs.exists_on_pypi == 'false'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/* --skip-existing
        echo "📤 Published to TestPyPI for testing"
      continue-on-error: true  # Don't fail if already exists on TestPyPI
    
    - name: Wait for TestPyPI propagation
      if: steps.version_check.outputs.version_changed == 'true' && steps.pypi_check.outputs.exists_on_pypi == 'false'
      run: |
        echo "⏳ Waiting 30 seconds for TestPyPI propagation..."
        sleep 30
    
    - name: Test installation from TestPyPI
      if: steps.version_check.outputs.version_changed == 'true' && steps.pypi_check.outputs.exists_on_pypi == 'false'
      run: |
        pip uninstall deepwiki-cli -y || true
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ deepwiki-cli==${{ steps.current_version.outputs.version }}
        python -c "from deepwiki_cli import query_repository; print('✅ TestPyPI installation test passed')"
        echo "✅ TestPyPI installation verification passed"
      continue-on-error: true  # Don't fail main workflow if TestPyPI test fails
    
    - name: Publish to PyPI
      if: steps.version_check.outputs.version_changed == 'true' && steps.pypi_check.outputs.exists_on_pypi == 'false'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
        echo "🚀 Successfully published version ${{ steps.current_version.outputs.version }} to PyPI!"
    
    - name: Create Git tag
      if: steps.version_check.outputs.version_changed == 'true' && steps.pypi_check.outputs.exists_on_pypi == 'false'
      run: |
        VERSION="${{ steps.current_version.outputs.version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag "v$VERSION"
        git push origin "v$VERSION"
        echo "🏷️ Created and pushed tag v$VERSION"
    
    - name: Create GitHub Release
      if: steps.version_check.outputs.version_changed == 'true' && steps.pypi_check.outputs.exists_on_pypi == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ steps.current_version.outputs.version }}"
        name: "Release v${{ steps.current_version.outputs.version }}"
        files: |
          dist/*
        generate_release_notes: true
        draft: false
        prerelease: false
    
    - name: Summary
      run: |
        echo "## 📋 Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Current Version**: ${{ steps.current_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Previous Version**: ${{ steps.previous_version.outputs.previous_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version Changed**: ${{ steps.version_check.outputs.version_changed }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.version_check.outputs.version_changed }}" = "true" ]; then
          if [ "${{ steps.pypi_check.outputs.exists_on_pypi }}" = "false" ]; then
            echo "- **Action Taken**: ✅ Built and published to PyPI" >> $GITHUB_STEP_SUMMARY
            echo "- **PyPI Link**: https://pypi.org/project/deepwiki-cli/${{ steps.current_version.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Action Taken**: ⚠️ Version already exists on PyPI, skipped" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- **Action Taken**: ❌ No version change detected, skipped build" >> $GITHUB_STEP_SUMMARY
        fi
